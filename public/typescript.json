{
  "@typescript-eslint/adjacent-overload-signatures": {
    "name": "@typescript-eslint/adjacent-overload-signatures",
    "value": "error",
    "description": "重载的函数必须写在一起",
    "reason": "增加可读性",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/array-type": {
    "name": "@typescript-eslint/array-type",
    "value": "off",
    "description": "限制数组类型必须使用 Array<T> 或 T[]",
    "reason": "允许灵活运用两者",
    "fixable": true,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/await-thenable": {
    "name": "@typescript-eslint/await-thenable",
    "value": "off",
    "description": "禁止对没有 then 方法的对象使用 await",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/ban-ts-comment": {
    "name": "@typescript-eslint/ban-ts-comment",
    "value": "off",
    "description": "禁止使用 // @ts-ignore // @ts-nocheck // @ts-check",
    "reason": "这种注释本身就是对特殊代码的说明",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/ban-tslint-comment": {
    "name": "@typescript-eslint/ban-tslint-comment",
    "value": "off",
    "description": "禁止使用类似 tslint:disable-next-line 这样的注释",
    "reason": "",
    "fixable": true,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/ban-types": {
    "name": "@typescript-eslint/ban-types",
    "value": "off",
    "description": "禁止使用指定的类型",
    "reason": "",
    "fixable": true,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/class-literal-property-style": {
    "name": "@typescript-eslint/class-literal-property-style",
    "value": ["error", "fields"],
    "description": "类的只读属性若是一个字面量，则必须使用只读属性而不是 getter",
    "reason": "",
    "fixable": true,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/consistent-generic-constructors": {
    "name": "@typescript-eslint/consistent-generic-constructors",
    "value": "off",
    "description": "使用 Map 或 Set 时，必须在构造函数上用泛型定义类型",
    "reason": "",
    "fixable": true,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/consistent-indexed-object-style": {
    "name": "@typescript-eslint/consistent-indexed-object-style",
    "value": "off",
    "description": "必须使用内置的 Record<K, T> 来描述仅包含可索引成员的接口",
    "reason": "",
    "fixable": true,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/consistent-type-assertions": {
    "name": "@typescript-eslint/consistent-type-assertions",
    "value": ["error", { "assertionStyle": "as", "objectLiteralTypeAssertions": "never" }],
    "description": "类型断言必须使用 as Type，禁止使用 <Type>，禁止对对象字面量进行类型断言（断言成 any 是允许的）",
    "reason": "<Type> 容易被理解为 jsx",
    "fixable": true,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/consistent-type-definitions": {
    "name": "@typescript-eslint/consistent-type-definitions",
    "value": ["error", "interface"],
    "description": "优先使用 interface 而不是 type",
    "reason": "interface 可以 implement, extend 和 merge",
    "fixable": true,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/consistent-type-exports": {
    "name": "@typescript-eslint/consistent-type-exports",
    "value": "off",
    "description": "一致的类型导出语法",
    "reason": "",
    "fixable": true,
    "extendsBaseRule": "",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/consistent-type-imports": {
    "name": "@typescript-eslint/consistent-type-imports",
    "value": ["error", { "fixStyle": "inline-type-imports" }],
    "description": "必须使用 import type 导入类型",
    "reason": "",
    "fixable": true,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/default-param-last": {
    "name": "@typescript-eslint/default-param-last",
    "value": "off",
    "description": "有默认值或可选的参数必须放到最后",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "default-param-last",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/dot-notation": {
    "name": "@typescript-eslint/dot-notation",
    "value": "off",
    "description": "禁止使用 foo['bar']，必须写成 foo.bar",
    "reason": "当需要写一系列属性的时候，可以更统一",
    "fixable": true,
    "extendsBaseRule": "dot-notation",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/explicit-function-return-type": {
    "name": "@typescript-eslint/explicit-function-return-type",
    "value": "off",
    "description": "函数返回值必须与声明的类型一致",
    "reason": "返回值类型可以推导出来",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/explicit-member-accessibility": {
    "name": "@typescript-eslint/explicit-member-accessibility",
    "value": "error",
    "description": "必须设置类的成员的可访问性",
    "reason": "将不需要公开的成员设为私有的，可以增强代码的可理解性，对文档输出也很友好",
    "fixable": true,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/explicit-module-boundary-types": {
    "name": "@typescript-eslint/explicit-module-boundary-types",
    "value": "off",
    "description": "导出的函数或类中的 public 方法必须定义输入输出参数的类型",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/init-declarations": {
    "name": "@typescript-eslint/init-declarations",
    "value": "off",
    "description": "变量必须在定义的时候赋值",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "init-declarations",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/lines-between-class-members": {
    "name": "@typescript-eslint/lines-between-class-members",
    "value": "off",
    "description": "类的成员之间是否需要空行",
    "reason": "有时为了紧凑需要挨在一起，有时为了可读性需要空一行",
    "fixable": false,
    "extendsBaseRule": "lines-between-class-members",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/member-ordering": {
    "name": "@typescript-eslint/member-ordering",
    "value": [
      "error",
      {
        "default": [
          "public-static-field",
          "protected-static-field",
          "private-static-field",
          "static-field",
          "public-static-method",
          "protected-static-method",
          "private-static-method",
          "static-method",
          "public-instance-field",
          "protected-instance-field",
          "private-instance-field",
          "public-field",
          "protected-field",
          "private-field",
          "instance-field",
          "field",
          "constructor",
          "public-instance-method",
          "protected-instance-method",
          "private-instance-method",
          "public-method",
          "protected-method",
          "private-method",
          "instance-method",
          "method"
        ]
      }
    ],
    "description": "指定类成员的排序规则",
    "reason": "优先级：\n1. static > instance\n2. field > constructor > method\n3. public > protected > private",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/method-signature-style": {
    "name": "@typescript-eslint/method-signature-style",
    "value": "error",
    "description": "接口中的方法必须用属性的方式定义",
    "reason": "配置了 strictFunctionTypes 之后，用属性的方式定义方法可以获得更严格的检查",
    "fixable": true,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/naming-convention": {
    "name": "@typescript-eslint/naming-convention",
    "value": "off",
    "description": "限制各种变量或类型的命名规则",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/no-array-constructor": {
    "name": "@typescript-eslint/no-array-constructor",
    "value": "off",
    "description": "禁止使用 Array 构造函数",
    "reason": "",
    "fixable": true,
    "extendsBaseRule": "no-array-constructor",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/no-base-to-string": {
    "name": "@typescript-eslint/no-base-to-string",
    "value": "off",
    "description": "禁止滥用 toString 方法",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/no-confusing-non-null-assertion": {
    "name": "@typescript-eslint/no-confusing-non-null-assertion",
    "value": "off",
    "description": "禁止使用容易混淆的非空断言",
    "reason": "",
    "fixable": true,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/no-confusing-void-expression": {
    "name": "@typescript-eslint/no-confusing-void-expression",
    "value": "off",
    "description": "禁止使用返回值为 void 的函数的返回值",
    "reason": "",
    "fixable": true,
    "extendsBaseRule": "",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/no-dupe-class-members": {
    "name": "@typescript-eslint/no-dupe-class-members",
    "value": "off",
    "description": "禁止重复定义类的成员",
    "reason": "编译阶段就会报错了",
    "fixable": false,
    "extendsBaseRule": "no-dupe-class-members",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/no-duplicate-enum-values": {
    "name": "@typescript-eslint/no-duplicate-enum-values",
    "value": "error",
    "description": "禁止枚举类型存在两个相同的值",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/no-duplicate-type-constituents": {
    "name": "@typescript-eslint/no-duplicate-type-constituents",
    "value": "off",
    "description": "不允许枚举同时具有数字和字符串成员",
    "reason": "",
    "fixable": true,
    "extendsBaseRule": "",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/no-dynamic-delete": {
    "name": "@typescript-eslint/no-dynamic-delete",
    "value": "off",
    "description": "禁止 delete 时传入的 key 是动态的",
    "reason": "",
    "fixable": true,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/no-empty-function": {
    "name": "@typescript-eslint/no-empty-function",
    "value": "off",
    "description": "不允许有空函数",
    "reason": "有时需要将一个空函数设置为某个项的默认值",
    "fixable": false,
    "extendsBaseRule": "no-empty-function",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/no-empty-interface": {
    "name": "@typescript-eslint/no-empty-interface",
    "value": ["error", { "allowSingleExtends": true }],
    "description": "禁止定义空的接口",
    "reason": "允许仅继承",
    "fixable": true,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/no-explicit-any": {
    "name": "@typescript-eslint/no-explicit-any",
    "value": ["error", { "fixToUnknown": true, "ignoreRestArgs": true }],
    "description": "禁止使用 any 类型，除了 rest 参数之外",
    "reason": "有时需要定义如 `(...args: any[]) => void` 的类型",
    "fixable": true,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/no-extra-non-null-assertion": {
    "name": "@typescript-eslint/no-extra-non-null-assertion",
    "value": "off",
    "description": "禁止多余的 non-null 断言",
    "reason": "",
    "fixable": true,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/no-extraneous-class": {
    "name": "@typescript-eslint/no-extraneous-class",
    "value": "off",
    "description": "禁止定义没必要的类，比如只有静态方法的类",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/no-floating-promises": {
    "name": "@typescript-eslint/no-floating-promises",
    "value": "off",
    "description": "禁止调用 Promise 时没有处理异常情况",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/no-for-in-array": {
    "name": "@typescript-eslint/no-for-in-array",
    "value": "off",
    "description": "禁止对 array 使用 for in 循环",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/no-implied-eval": {
    "name": "@typescript-eslint/no-implied-eval",
    "value": "off",
    "description": "禁止使用 eval",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "no-implied-eval",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/no-import-type-side-effects": {
    "name": "@typescript-eslint/no-import-type-side-effects",
    "value": "error",
    "description": "强制要求在只有内联类型限定符的情况下使用顶级导入类型限定符",
    "reason": "",
    "fixable": true,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/no-inferrable-types": {
    "name": "@typescript-eslint/no-inferrable-types",
    "value": "error",
    "description": "禁止给一个初始化时直接赋值为 number, string 的变量显式的声明类型",
    "reason": "可以简化代码",
    "fixable": true,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/no-invalid-this": {
    "name": "@typescript-eslint/no-invalid-this",
    "value": "off",
    "description": "禁止在类之外的地方使用 this",
    "reason": "通常情况下只允许在 class 中使用 this，但某些第三方库需要使用 this 获取上下文",
    "fixable": false,
    "extendsBaseRule": "no-invalid-this",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/no-invalid-void-type": {
    "name": "@typescript-eslint/no-invalid-void-type",
    "value": "error",
    "description": "禁止使用无意义的 void 类型",
    "reason": "void 只能用在函数的返回值中",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/no-loop-func": {
    "name": "@typescript-eslint/no-loop-func",
    "value": "off",
    "description": "禁止在循环内的函数内部出现循环体条件语句中定义的变量",
    "reason": "使用 let 就已经解决了这个问题了",
    "fixable": false,
    "extendsBaseRule": "no-loop-func",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/no-loss-of-precision": {
    "name": "@typescript-eslint/no-loss-of-precision",
    "value": "error",
    "description": "禁止使用超出 js 精度范围的数字",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "no-loss-of-precision",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/no-magic-numbers": {
    "name": "@typescript-eslint/no-magic-numbers",
    "value": "off",
    "description": "禁止使用 magic numbers",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "no-magic-numbers",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/no-meaningless-void-operator": {
    "name": "@typescript-eslint/no-meaningless-void-operator",
    "value": "off",
    "description": "禁止 void 抛出空",
    "reason": "",
    "fixable": true,
    "extendsBaseRule": "",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/no-misused-new": {
    "name": "@typescript-eslint/no-misused-new",
    "value": "off",
    "description": "禁止在接口中定义 constructor，或在类中定义 new",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/no-misused-promises": {
    "name": "@typescript-eslint/no-misused-promises",
    "value": "off",
    "description": "避免错误的使用 Promise",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/no-mixed-enums": {
    "name": "@typescript-eslint/no-mixed-enums",
    "value": "off",
    "description": "不允许枚举同时具有数字和字符串成员",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/no-namespace": {
    "name": "@typescript-eslint/no-namespace",
    "value": ["error", { "allowDeclarations": true, "allowDefinitionFiles": true }],
    "description": "禁止使用 namespace 来定义命名空间",
    "reason": "使用 es6 引入模块，才是更标准的方式。\n但是允许使用 declare namespace ... {} 来定义外部命名空间",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/no-non-null-asserted-nullish-coalescing": {
    "name": "@typescript-eslint/no-non-null-asserted-nullish-coalescing",
    "value": "error",
    "description": "禁止非空断言后面跟着双问号",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/no-non-null-asserted-optional-chain": {
    "name": "@typescript-eslint/no-non-null-asserted-optional-chain",
    "value": "error",
    "description": "禁止在 optional chaining 之后使用 non-null 断言（感叹号）",
    "reason": "optional chaining 后面的属性一定是非空的",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/no-non-null-assertion": {
    "name": "@typescript-eslint/no-non-null-assertion",
    "value": "off",
    "description": "禁止使用 non-null 断言（感叹号）",
    "reason": "使用 non-null 断言时就已经清楚了风险",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/no-redeclare": {
    "name": "@typescript-eslint/no-redeclare",
    "value": "off",
    "description": "禁止重复定义变量",
    "reason": "禁用 var 之后，编译阶段就会报错了",
    "fixable": false,
    "extendsBaseRule": "no-redeclare",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/no-redundant-type-constituents": {
    "name": "@typescript-eslint/no-redundant-type-constituents",
    "value": "off",
    "description": "禁止无用的联合类型或交叉类型",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/no-require-imports": {
    "name": "@typescript-eslint/no-require-imports",
    "value": "error",
    "description": "禁止使用 require",
    "reason": "统一使用 import 来引入模块，特殊情况使用单行注释允许 require 引入",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/no-restricted-imports": {
    "name": "@typescript-eslint/no-restricted-imports",
    "value": "off",
    "description": "禁止导入指定的模块",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "no-restricted-imports",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/no-shadow": {
    "name": "@typescript-eslint/no-shadow",
    "value": "off",
    "description": "禁止变量名与上层作用域内的已定义的变量重复",
    "reason": "很多时候函数的形参和传参是同名的",
    "fixable": false,
    "extendsBaseRule": "no-shadow",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/no-this-alias": {
    "name": "@typescript-eslint/no-this-alias",
    "value": ["error", { "allowDestructuring": true }],
    "description": "禁止将 this 赋值给其他变量，除非是解构赋值",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/no-throw-literal": {
    "name": "@typescript-eslint/no-throw-literal",
    "value": "off",
    "description": "禁止 throw 字面量，必须 throw 一个 Error 对象",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "no-throw-literal",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/no-type-alias": {
    "name": "@typescript-eslint/no-type-alias",
    "value": "off",
    "description": "禁止使用类型别名",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/no-unnecessary-boolean-literal-compare": {
    "name": "@typescript-eslint/no-unnecessary-boolean-literal-compare",
    "value": "off",
    "description": "测试表达式中的布尔类型禁止与 true 或 false 直接比较",
    "reason": "",
    "fixable": true,
    "extendsBaseRule": "",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/no-unnecessary-condition": {
    "name": "@typescript-eslint/no-unnecessary-condition",
    "value": "off",
    "description": "条件表达式禁止是永远为真（或永远为假）的",
    "reason": "",
    "fixable": true,
    "extendsBaseRule": "",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/no-unnecessary-qualifier": {
    "name": "@typescript-eslint/no-unnecessary-qualifier",
    "value": "off",
    "description": "在命名空间中，可以直接使用内部变量，不需要添加命名空间前缀",
    "reason": "",
    "fixable": true,
    "extendsBaseRule": "",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/no-unnecessary-type-arguments": {
    "name": "@typescript-eslint/no-unnecessary-type-arguments",
    "value": "off",
    "description": "禁止范型的类型有默认值时，将范型设置为该默认值",
    "reason": "",
    "fixable": true,
    "extendsBaseRule": "",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/no-unnecessary-type-assertion": {
    "name": "@typescript-eslint/no-unnecessary-type-assertion",
    "value": "off",
    "description": "禁止无用的类型断言",
    "reason": "",
    "fixable": true,
    "extendsBaseRule": "",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/no-unnecessary-type-constraint": {
    "name": "@typescript-eslint/no-unnecessary-type-constraint",
    "value": "error",
    "description": "禁止没用的类型限制",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/no-unsafe-argument": {
    "name": "@typescript-eslint/no-unsafe-argument",
    "value": "off",
    "description": "禁止将 any 类型的变量作为函数参数调用",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/no-unsafe-assignment": {
    "name": "@typescript-eslint/no-unsafe-assignment",
    "value": "off",
    "description": "禁止将变量或属性的类型设置为 any",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/no-unsafe-call": {
    "name": "@typescript-eslint/no-unsafe-call",
    "value": "off",
    "description": "禁止调用 any 类型的变量上的方法",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/no-unsafe-declaration-merging": {
    "name": "@typescript-eslint/no-unsafe-declaration-merging",
    "value": "off",
    "description": "禁止 class 和 interface 合并类型",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/no-unsafe-enum-comparison": {
    "name": "@typescript-eslint/no-unsafe-enum-comparison",
    "value": "off",
    "description": "禁止将枚举值与非枚举值进行比较",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/no-unsafe-member-access": {
    "name": "@typescript-eslint/no-unsafe-member-access",
    "value": "off",
    "description": "禁止获取 any 类型的变量中的属性",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/no-unsafe-return": {
    "name": "@typescript-eslint/no-unsafe-return",
    "value": "off",
    "description": "禁止函数的返回值的类型是 any",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/no-unused-expressions": {
    "name": "@typescript-eslint/no-unused-expressions",
    "value": ["error", { "allowShortCircuit": true, "allowTernary": true, "allowTaggedTemplates": true }],
    "description": "禁止无用的表达式",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "no-unused-expressions",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/no-unused-vars": {
    "name": "@typescript-eslint/no-unused-vars",
    "value": "off",
    "description": "已定义的变量必须使用",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "no-unused-vars",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/no-use-before-define": {
    "name": "@typescript-eslint/no-use-before-define",
    "value": "off",
    "description": "禁止在定义变量之前就使用它",
    "reason": "编译阶段检查就足够了",
    "fixable": false,
    "extendsBaseRule": "no-use-before-define",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/no-useless-constructor": {
    "name": "@typescript-eslint/no-useless-constructor",
    "value": "error",
    "description": "禁止出现没必要的 constructor",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "no-useless-constructor",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/no-useless-empty-export": {
    "name": "@typescript-eslint/no-useless-empty-export",
    "value": "off",
    "description": "禁止导出空对象",
    "reason": "",
    "fixable": true,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/no-var-requires": {
    "name": "@typescript-eslint/no-var-requires",
    "value": "off",
    "description": "禁止使用 require 来引入模块",
    "reason": "no-require-imports 规则已经约束了 require",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/non-nullable-type-assertion-style": {
    "name": "@typescript-eslint/non-nullable-type-assertion-style",
    "value": "off",
    "description": "必须使用 ! 而不是 as",
    "reason": "",
    "fixable": true,
    "extendsBaseRule": "",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/padding-line-between-statements": {
    "name": "@typescript-eslint/padding-line-between-statements",
    "value": "off",
    "description": "限制语句之间的空行规则，比如变量定义完之后必须要空行",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "padding-line-between-statements",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/parameter-properties": {
    "name": "@typescript-eslint/parameter-properties",
    "value": "off",
    "description": "类的构造函数参数作为类属性时，必须加上可访问性修饰符",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/prefer-as-const": {
    "name": "@typescript-eslint/prefer-as-const",
    "value": "off",
    "description": "使用 as const 替代 as 'bar'",
    "reason": "as const 是新语法，不是很常见",
    "fixable": true,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/prefer-enum-initializers": {
    "name": "@typescript-eslint/prefer-enum-initializers",
    "value": "off",
    "description": "枚举值必须初始化",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/prefer-for-of": {
    "name": "@typescript-eslint/prefer-for-of",
    "value": "error",
    "description": "使用 for 循环遍历数组时，如果索引仅用于获取成员，则必须使用 for of 循环替代 for 循环",
    "reason": "for of 循环更加易读",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/prefer-function-type": {
    "name": "@typescript-eslint/prefer-function-type",
    "value": "error",
    "description": "使用函数类型别名替代包含函数调用声明的接口",
    "reason": "",
    "fixable": true,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/prefer-includes": {
    "name": "@typescript-eslint/prefer-includes",
    "value": "off",
    "description": "使用 includes 而不是 indexOf",
    "reason": "",
    "fixable": true,
    "extendsBaseRule": "",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/prefer-literal-enum-member": {
    "name": "@typescript-eslint/prefer-literal-enum-member",
    "value": "off",
    "description": "枚举类型的值必须是字面量，禁止是计算值",
    "reason": "编译阶段检查就足够了",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/prefer-namespace-keyword": {
    "name": "@typescript-eslint/prefer-namespace-keyword",
    "value": "error",
    "description": "禁止使用 module 来定义命名空间",
    "reason": "module 已成为 js 的关键字",
    "fixable": true,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/prefer-nullish-coalescing": {
    "name": "@typescript-eslint/prefer-nullish-coalescing",
    "value": "off",
    "description": "使用 ?? 替代 ||",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/prefer-optional-chain": {
    "name": "@typescript-eslint/prefer-optional-chain",
    "value": "error",
    "description": "使用 optional chaining 替代 &&",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/prefer-readonly": {
    "name": "@typescript-eslint/prefer-readonly",
    "value": "off",
    "description": "私有变量如果没有在构造函数外被赋值，则必须设为 readonly",
    "reason": "",
    "fixable": true,
    "extendsBaseRule": "",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/prefer-readonly-parameter-types": {
    "name": "@typescript-eslint/prefer-readonly-parameter-types",
    "value": "off",
    "description": "函数的参数必须设置为 readonly",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/prefer-reduce-type-parameter": {
    "name": "@typescript-eslint/prefer-reduce-type-parameter",
    "value": "off",
    "description": "使用 reduce 方法时，必须传入范型，而不是对第二个参数使用 as",
    "reason": "",
    "fixable": true,
    "extendsBaseRule": "",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/prefer-regexp-exec": {
    "name": "@typescript-eslint/prefer-regexp-exec",
    "value": "off",
    "description": "使用 RegExp#exec 而不是 String#match",
    "reason": "",
    "fixable": true,
    "extendsBaseRule": "",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/prefer-return-this-type": {
    "name": "@typescript-eslint/prefer-return-this-type",
    "value": "off",
    "description": "类的方法返回值是 this 时，类型必须设置为 this",
    "reason": "",
    "fixable": true,
    "extendsBaseRule": "",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/prefer-string-starts-ends-with": {
    "name": "@typescript-eslint/prefer-string-starts-ends-with",
    "value": "off",
    "description": "使用 String#startsWith 而不是其他方式",
    "reason": "",
    "fixable": true,
    "extendsBaseRule": "",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/prefer-ts-expect-error": {
    "name": "@typescript-eslint/prefer-ts-expect-error",
    "value": "off",
    "description": "当需要忽略下一行的 ts 错误时，必须使用 @ts-expect-error 而不是 @ts-ignore",
    "reason": "使用 @ts-expect-error 可以避免对不会报错的代码设置了 @ts-ignore",
    "fixable": true,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/promise-function-async": {
    "name": "@typescript-eslint/promise-function-async",
    "value": "off",
    "description": "async 函数的返回值必须是 Promise",
    "reason": "",
    "fixable": true,
    "extendsBaseRule": "",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/require-array-sort-compare": {
    "name": "@typescript-eslint/require-array-sort-compare",
    "value": "off",
    "description": "使用 sort 时必须传入比较函数",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/require-await": {
    "name": "@typescript-eslint/require-await",
    "value": "off",
    "description": "async 函数中必须存在 await 语句",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "require-await",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/restrict-plus-operands": {
    "name": "@typescript-eslint/restrict-plus-operands",
    "value": "off",
    "description": "使用加号时，两者必须同为数字或同为字符串",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/restrict-template-expressions": {
    "name": "@typescript-eslint/restrict-template-expressions",
    "value": "off",
    "description": "模版字符串中的变量类型必须是字符串",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/return-await": {
    "name": "@typescript-eslint/return-await",
    "value": "off",
    "description": "禁止在 return 语句里使用 await",
    "reason": "",
    "fixable": true,
    "extendsBaseRule": "no-return-await",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/sort-type-constituents": {
    "name": "@typescript-eslint/sort-type-constituents",
    "value": "off",
    "description": "联合类型和交叉类型必须排序",
    "reason": "",
    "fixable": true,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/strict-boolean-expressions": {
    "name": "@typescript-eslint/strict-boolean-expressions",
    "value": "off",
    "description": "条件判断必须传入布尔值",
    "reason": "",
    "fixable": true,
    "extendsBaseRule": "",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/switch-exhaustiveness-check": {
    "name": "@typescript-eslint/switch-exhaustiveness-check",
    "value": "off",
    "description": "使用联合类型作为 switch 的对象时，必须包含每一个类型的 case",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/triple-slash-reference": {
    "name": "@typescript-eslint/triple-slash-reference",
    "value": ["error", { "path": "never", "types": "always", "lib": "always" }],
    "description": "禁止使用三斜杠导入文件",
    "reason": "三斜杠是已废弃的语法，但在类型声明文件中还是可以使用的",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/typedef": {
    "name": "@typescript-eslint/typedef",
    "value": [
      "error",
      {
        "arrayDestructuring": false,
        "arrowParameter": false,
        "memberVariableDeclaration": false,
        "objectDestructuring": false,
        "parameter": false,
        "propertyDeclaration": true,
        "variableDeclaration": false
      }
    ],
    "description": "interface 和 type 定义时必须声明成员的类型",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  },
  "@typescript-eslint/unbound-method": {
    "name": "@typescript-eslint/unbound-method",
    "value": "off",
    "description": "方法调用时需要绑定到正确的 this 上",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": true
  },
  "@typescript-eslint/unified-signatures": {
    "name": "@typescript-eslint/unified-signatures",
    "value": "error",
    "description": "函数重载时，若能通过联合类型将两个函数的类型声明合为一个，则使用联合类型而不是两个函数声明",
    "reason": "",
    "fixable": false,
    "extendsBaseRule": "",
    "requiresTypeChecking": false
  }
}
